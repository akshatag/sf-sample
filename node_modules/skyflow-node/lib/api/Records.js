"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _Notebooks = require("./Notebooks");

var _http = require("../http");

var _VaultNotFoundException = _interopRequireDefault(require("../CustomErrors/VaultNotFoundException"));

var url = '/records';
var Records = {
  insertRecords: function insertRecords(tableName, recordFields) {
    var _this = this;

    return this.callApi(function (_ref) {
      var tableName = _ref.tableName,
          recordFields = _ref.recordFields;
      console.log(recordFields, _this.vaultUrl);
      return _axios.default.post(_this.vaultUrl + '/' + tableName, {
        records: recordFields
      }, {
        headers: _this.defaultHeaders
      }).then(function (res) {
        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      recordFields: recordFields
    });
  },
  getRecords: function getRecords(tableName) {
    var _this2 = this;

    return this.callApi(function (_ref2) {
      var tableName = _ref2.tableName;
      return _axios.default.get(_this2.vaultUrl + '/' + tableName, {
        headers: _this2.defaultHeaders
      }).then(function (res) {
        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName
    });
  },
  getRecord: function getRecord(tableName, recordId) {
    var _this3 = this;

    return this.callApi(function (_ref3) {
      var tableName = _ref3.tableName,
          recordId = _ref3.recordId;
      return _axios.default.get(_this3.vaultUrl + '/' + tableName + '/' + recordId, {
        headers: _this3.defaultHeaders
      }).then(function (res) {
        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      recordId: recordId
    });
  },
  updateRecord: function updateRecord(tableName, recordId, recordField) {
    var _this4 = this;

    return this.callApi(function (_ref4) {
      var tableName = _ref4.tableName,
          recordId = _ref4.recordId,
          recordField = _ref4.recordField;
      return _axios.default.put(_this4.vaultUrl + '/' + tableName + '/' + recordId, {
        record: recordField
      }, {
        headers: _this4.defaultHeaders
      }).then(function (res) {
        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      recordId: recordId,
      recordField: recordField
    });
  },
  deleteRecord: function deleteRecord(tableName, recordId) {
    var _this5 = this;

    return this.callApi(function (_ref5) {
      var tableName = _ref5.tableName,
          recordId = _ref5.recordId;
      return _axios.default.delete(_this5.vaultUrl + '/' + tableName + '/' + recordId, {
        headers: _this5.defaultHeaders
      }).then(function (res) {
        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName,
      recordId: recordId
    });
  },
  deleteAllRecords: function deleteAllRecords(tableName) {
    var _this6 = this;

    return this.callApi(function (_ref6) {
      var tableName = _ref6.tableName;
      return _axios.default.delete(_this6.vaultUrl + '/' + tableName, {
        headers: _this6.defaultHeaders
      }).then(function (res) {
        return res.data;
      }).catch(function (err) {
        return err && err.response && err.response.data;
      });
    }, {
      tableName: tableName
    });
  }
};
var _default = Records;
exports.default = _default;